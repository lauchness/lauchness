AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates an s3 bucket with static hosting, a cloud front
  dist pointed at it and a lambda function triggered by the dist. The lambda function
  intercepts the viewer request event, and authorizes the user before allowing them
  into the s3 bucket
Parameters:
  # S3
  ContentBucketName:
    Type: String
    Description: The name of the s3 bucket you're creating. must be unique or creation will fail
    Default: www.lauchness.com
  RedirectBucketName:
    Type: String
    Description: The name of the s3 bucket you're creating. must be unique or creation will fail
    Default: lauchness.com

  # Domain
  HostedZoneID:
    Type: "AWS::Route53::HostedZone::Id"
    Description: Which hostedzone is the DNS entry being created in?
  HostedZoneName:
    Type: String
    Description: The domain name of the route53 hosted zone in which to create the DNS record for your site.
    Default: lauchness.com
  Subdomain:
    Type: "String"
    Description: "The Subdomain name we want added for this service. Must be a Subdomain of the hosted zone."
    Default: www
  CertificateArn:
    Type: String
    Description: The arn of the ssl certificate you're using in cloudfront, default certificate is for lauchness.com
    Default: arn:aws:acm:us-east-1:153262436864:certificate/143ffb55-a6b4-4686-a816-a334adca6134
  CacheTTL:
    Type: String
    Description: The time in seconds you wish cloudfront to cache before cloudfront checks the origin.
    Default: 86400

  # Tags
  Client:
    Type: String
    Description: The value of the client key, used for identification and tracking of resources
    Default: lauchness
  Email:
    Type: String
    Description: The value of the email key, used for identification and tracking of resources
    Default: lauchlanchisholm@gmail.com
  Project:
    Type: String
    Description: The name of the project you're working on, used for identification and tracking of resources
    Default: lauchness-site

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "S3 Configuration"
      Parameters:
      - ContentBucketName
      - BuildBucketName
    - Label:
        default: "Domain Configuration"
      Parameters:
      - HostedZoneID
      - HostedZoneName
      - Subdomain
      - CertificateArn
      - CacheTTL
    - Label:
        default: "Tags"
      Parameters:
      - Client
      - Email
      - Project
    ParameterLabels:
      # S3 Configuration
      ContentBucketName:
        default: "Content Bucket Name:"
      RedirectBucketName:
        default: "Redirect Bucket Name:"
      # Domain Configuration
      HostedZoneID:
        default: "Domain ID:"
      HostedZoneName:
        default: "Domain Name:"
      Subdomain:
        default: "Subdomain:"
      CertificateArn:
        default: "SSL Certificate ARN:"
      CacheTTL:
        default: "Time to Live::"
      # Tags
      Client:
        default: "Client:"
      Email:
        default: "E-mail Address:"
      Project:
        default: "Project:"
Resources:

#DNS Records
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "${Subdomain}.${HostedZoneName}"
      AliasTarget:
        DNSName: !GetAtt CloudfrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref HostedZoneID
      Type: A

  DNSRecordApex:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "${HostedZoneName}"
      AliasTarget:
        DNSName: !GetAtt CloudfrontDistributionApex.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref HostedZoneID
      Type: A

#Cloudfront Distros
  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: S3ContentBucket
    Properties:
      DistributionConfig:
        Aliases:
        - !Sub "${Subdomain}.${HostedZoneName}"
        Origins:
        - DomainName: !Sub "${S3ContentBucket}.s3-website-${AWS::Region}.amazonaws.com"
          Id: S3Origin
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        Enabled: 'true'
        HttpVersion: http2
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: S3Origin
          DefaultTTL: !Ref CacheTTL
          ForwardedValues:
            QueryString: 'false'
            Headers:
            - Accept
            - Host
            - Origin
            - Access-Control-Request-Headers
            - Access-Control-Request-Method
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: viewer-response
              LambdaFunctionARN: !Sub "${SecHeaderLambda.Arn}:${SecHeaderLambdaVersion.Version}"
        CustomErrorResponses:
        - ErrorCode: 403
          ResponseCode: 200
          ResponsePagePath: "/index.html"
        - ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: "/404.html"
      Tags:
      - Key: client
        Value: !Ref Client
      - Key: email
        Value: !Ref Email

  CloudfrontDistributionApex:
    Type: AWS::CloudFront::Distribution
    DependsOn: S3ContentBucket
    Properties:
      DistributionConfig:
        Aliases:
        - !Sub "${HostedZoneName}"
        Origins:
        - DomainName: !Sub "${S3RedirectBucket}.s3-website-${AWS::Region}.amazonaws.com"
          Id: S3Origin
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        Enabled: 'true'
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: S3Origin
          DefaultTTL: !Ref CacheTTL
          ForwardedValues:
            QueryString: 'false'
            Headers:
            - Origin
            - Access-Control-Request-Headers
            - Access-Control-Request-Method
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: viewer-response
              LambdaFunctionARN: !Sub "${SecHeaderLambda.Arn}:${SecHeaderLambdaVersion.Version}"
      Tags:
      - Key: client
        Value: !Ref Client
      - Key: email
        Value: !Ref Email

#S3 Buckets
  S3ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref ContentBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      Tags:
      - Key: client
        Value: !Ref Client
      - Key: email
        Value: !Ref Email
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: S3ContentBucketPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: PublicGetObject
          Effect: Allow
          Principal:
            AWS: "*"
          Action: s3:GetObject
          Resource:
            - !Sub "arn:aws:s3:::${S3ContentBucket}"
            - !Sub "arn:aws:s3:::${S3ContentBucket}/*"
      Bucket:
        Ref: S3ContentBucket
  
  S3RedirectBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref RedirectBucketName
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Sub "${Subdomain}.${HostedZoneName}"
      Tags:
      - Key: client
        Value: !Ref Client
      - Key: email
        Value: !Ref Email
  BucketPolicyRedirect:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: S3RedirectBucketPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: PublicGetObject
          Effect: Allow
          Principal:
            AWS: "*"
          Action: s3:GetObject
          Resource:
            - !Sub "arn:aws:s3:::${S3RedirectBucket}"
            - !Sub "arn:aws:s3:::${S3RedirectBucket}/*"
      Bucket:
        Ref: S3RedirectBucket
  
  #Lambda Resources, applies security headers to viewer response on Cloudfront distros
  SecHeaderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - "'use strict';\n"
              - "exports.handler = (event, context, callback) => {\n"
              - "\n"
              - "   //Get contents of response\n"
              - "   const response = event.Records[0].cf.response;\n"
              - "   const headers = response.headers;\n"
              - "\n"
              - " //Set new headers\n"
              - " headers['strict-transport-security'] = [{key: 'Strict-Transport-Security', value: 'max-age=2592000'}];\n"
              - " headers['x-content-type-options'] = [{key: 'X-Content-Type-Options', value: 'nosniff'}];\n"
              - " headers['x-frame-options'] = [{key: 'X-Frame-Options', value: 'sameorigin'}];\n"
              - " headers['x-xss-protection'] = [{key: 'X-XSS-Protection', value: '1; mode=block'}];\n"
              - " headers['referrer-policy'] = [{key: 'Referrer-Policy', value: 'same-origin'}];\n"
              - "\n"
              - "   //Return modified response\n"
              - "   callback(null, response);\n"
              - "};"
      FunctionName: !Sub "${AWS::StackName}-security-headers"
      Handler: index.handler
      Role: !GetAtt LambdaEdgeRole.Arn
      Runtime: nodejs10.x
      Timeout: '5'
      Tags:
      - Key: client
        Value: !Ref Client
      - Key: email
        Value: !Ref Email
  SecHeaderLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SecHeaderLambda
      Description: A version of SecHeaderLambda, for cloudfront
  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "srv-${AWS::StackName}-${Client}-${Project}-lambda-edge-role"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: Cloudwatch-Logs
        PolicyDocument:
          Statement:
            Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource:
            - "arn:aws:logs:*:*:*"

Outputs:
  WebsiteURL:
    Value: !GetAtt S3ContentBucket.WebsiteURL
    Description: URL for website hosted on S3
  # S3BucketSecureURL:
  #   Value: !Sub "https://${S3ContentBucket.WebsiteURL}"
  #   Description: Name of S3 bucket to hold website content
  DistributionId:
    Description: CloudFront Distribution Id
    Value: !Ref CloudfrontDistribution
  S3OriginDNSName:
    Description: Name of S3 bucket to hold website content.
    Value: !GetAtt S3ContentBucket.DomainName